------------------------------------------------------------------
00 : LazyInstantiation (지연된 인스턴스화)
------------------------------------------------------------------
- 사용된 적이 없는 코드는 컴파일하지 않는다.

class A
{
    int data;
public:
    void foo(int n) { *n = 10; } // error, 값에 해당하는 주소에 값을 넣으려고한다.
}

int main()
{
    A a;
}

------------------------------------------------------------------

template<typename T> class A
{
    T data;
public:
    void foo(T n) { *n = 10; }
}

int main()
{
    A<int> a;   // ok,, 뭐지??
                // 아~ 안써서 컴파일을 안했구나.
}

------------------------------------------------------------------

#include <iostream>
using namespace std;

struct Resource1
{
    Resource1()     { cout << "Resource1()" << endl; }
    ~Resource1()    { cout << "~Resource1()" << endl; }
};

struct Resource2
{
    Resource2()     { cout << "Resource2()" << endl; }
    ~Resource2()    { cout << "~Resource2()" << endl; }
};

struct Test
{
    Resource1 res1;
    static Resource2 res2;
};
Resource2 Test::res2;

int main()
{
    cout << "main" << endl;
    Test t;
}

결과 --->
Resource2()
main
Resource1()
~Resource1()
~Resource2()

이유 --->
main함수가 가장 먼저 실행되지만 전역 변수가 있으면 전역 변수부터 처리를 한다.
Resource2 Test::res2;

여기서 --->
Resource2 Test::res2;를 주석처리하면
static 으로 선언한 res2가 호출되지 않는다.

여기서 --->
Test 구조체를 template으로 바꾸면 res2를 사용한 적이 없기때문에 템플릿 오버로딩이 되지 않아 res2의 생성자가 호출되지 않는다.
template<typename T> struct Test
{
    Resource1 res1;
    static Resource2 res2;
};
template<typename T> Resource2 Test<T>::res2;

template이고 자시고 모르겠고,,,
그냥 static으로 포함된 멤버변수는 사용되지 않으면 컴파일되지 않는가 보다.

------------------------------------------------------------------
01 : LazyInstantiation & if (지연된 인스턴스화)
------------------------------------------------------------------

template<typename T> void foo(T n)
{
    *n = 10;
}

int main()
{
    // if 는 실행시간 조건 검사이기 때문에 인스턴스화 된다.
    if ( false )
    {
        foo(0);
    }
}

------------------------------------------------------------------

- C++ 17에 등장한 if constexpr

template<typename T> void foo(T n)
{
    *n = 10;
}

int main()
{
    // if constexpr 는 컴파일 시간에 조건 검사한다.
    // 단, 변수를 사용할 수 없다.
    if constexpr ( false )
    {
        foo(0);
    }
}

------------------------------------------------------------------

- 아래 코드는 템플릿 코드를 생성되지 않기 때문에 에러가 발생하지 않는다.

template<typename T> void foo(T n, int)
{
    *n = 3.4;
}

template<typename T> void foo(T n, double)
{
}

int main()
{
    foo(1, 3.4);
}

------------------------------------------------------------------